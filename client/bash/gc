#!/bin/bash
#set -x

USER=$(id -nu)
DIR=$(pwd)
CMD="git clone"
CLONE_FILE="${HOME}/.gc"
PROJECT_NAME=""

usage()
{
  echo "Usage: "
  echo "  $0 git_url"
  echo "  $0 cd dir_name"
  echo "  $0 ls|-l"
  echo "  $0 -d project"
  exit 1
}

show_clones()
{
  [[ -e ${CLONE_FILE} ]] && more ${CLONE_FILE} && return 0
}

# Append repo in CLONE_FILE
write_clonefile()
{
  num=$(awk '/./{line=$0} END{print $1}' $CLONE_FILE)
  num=$((num+1))
  echo "$num $PROJECT_NAME $1 $DIR/$PROJECT_NAME" >> $CLONE_FILE
}

# Remove repo in CLONE_FILE
remove_repo()
{
  echo "remove repo $1"
  name=$1
  dir=$(awk -v "name=$name" '$1==name {print $NF}' < $CLONE_FILE)

  sed -i "/^$name\ /d" ~/.gc
  [[ "$dir" != "/" && "$dir" != "" ]] && rm -fr $dir
}

# Retrieve project name from repo url
get_project_name()
{
  echo $(sed 's/.*\/\(.*\)\.git/\1/' <<< "$1")
}

chdir()
{
  dir=$(awk -v "num=$1" '$1==num {print $NF}' < $CLONE_FILE)
  cd $dir
  exec bash
}

case "$1" in
  cd)
    # Change directory
    if [ "$2" == "" ]
    then
      usage
    else
      chdir $2
      exit 0
    fi
    ;;
  ls)
    show_clones
    exit 0
    ;;
esac

[[ ! -e $CLONE_FILE ]] && touch $CLONE_FILE

while getopts "hld:f:" arg; do
  case $arg in
    h)
      usage 
      ;;
    f)
      clone_file=${OPTARG}
      ;;
    d)
      repo_name=${OPTARG}
      ;;
    l)
      show_clones
      exit 0
      ;;
  esac
done
shift $((OPTIND-1))

[[ "$repo_name" != "" ]] && remove_repo $repo_name && exit 0

[[ $1 == "" ]] && usage
repo_url="$1"

if [ "$repo_url" == "" ]
then
  usage
fi

PROJECT_NAME=$(get_project_name $repo_url)

if [ $(grep -c $repo_url $CLONE_FILE) == 0 ]
then
  echo "Not cloned yet!"
else
  echo "Cloned in CLONE_FILE!"
  exit 1
fi

eval $CMD $1
if [[ $? != 0 ]]
then
  echo "Failed to clone repo!"
else
  write_clonefile "$repo_url"
fi
